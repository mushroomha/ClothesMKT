day 3
1. 创建products.xml,存储商品数据
2. 创建ProductsXmlUtils类，用于解析xml文件
3. 引入xpp3和xstream包，方便引用相关的类
4. 编写ProductsXmlUtils,包括读取和写入xml文件
5. 创建测试类，使用上一条的类来读取xml文件内的数据信息并输出展现
6. 创建HomeClass类，用于向用户展示商品信息主页界面。在WelcomeClass的循环结束处添加其调用
7. 下载ConsoleTable类，用于控制台表格样式生成
8. 创建ClothesService接口并实现
9. 在HomeClass类中调用ClothesService并添加数据到table后输出


day 2
1. 在BaseClass类中添加一个User对象，便于缓存之后拿来直接用
2. 在com.vince下创建MainClass作为程序启动类(直接输入psvm并回车可以快速生成主函数)
3. 在com.vince.ui下创建WelcomeClass,作为进入程序的欢迎界面
4. 通过WelcomeClass输出欢迎信息，注意调用println和getstring函数，并对输入的内容作出判断
5. 创建ui下的RegisterClass,表示注册时向用户展示的界面
6. 创建utils下的BusinessException,作为交易异常类
7. 创建service下的UserService接口及实现
8. 创建UserIO,用以将用户的信息写入到文件里保存,或读取
9. 在RegisterClass和WelcomeClass中调用相关类的方法
10. 创建LoginClass类，表示用户登录,在UserServiceImpl中增加新的方法Login并实现
11. 创建工具类EmptyUtils,判断字符串是否为空
12. 在WelcomeClass中完成对login, register 服务的调用，并在start方法开头初始化UserIO实例，读取数据


day 1
1. 在com.vince.bean文件夹下创建四个实体类，包括了用户、衣服、订单和订单明细。
2. 在com.vince下创建utils工具类文件夹，包含了一个OrderStatusType的订单状态枚举类。
3. 创建service, test, ui, res文件夹，再通过右键点击untitled，通过maven添加库junit.
4. 创建r_temp.properties 和 run.bat脚本文件。注意设置.properties文件的编码方式为UTF-8
5. 执行run.bat,使用native2ascii.exe将非西方语系转换为java unicode escape(jdk9.0之后不存在了
6. 创建BaseClass, 使用ResourceBundle寻找路径对应的.properties文件获取bundle
Bundle(捆): 查找文件的函数，通常用于不同语言的后缀。一般是“自定义名_语言代码_国别代码.properties”
如my_en_US.properties: cancelKey=cancel | my_zh_CN.properties=取消
Resource.getBundle("res", new Locale("zh","CN")) 或 ("res",Locale.US)查找对应语言文件